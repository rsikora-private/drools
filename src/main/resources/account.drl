package account

import model.*
import service.AccountService


global AccountService accountService

dialect "java"


function void display(String message) {
   System.out.println(message);
}

declare Person
  name : String @key
  student :boolean
end


rule "Double balance when account balance is lower than 100"
        no-loop //This attribute informs the rule engine that a rule should be activated only once per matched facts

        when
            $customer: Customer()
            $account:  Account(balance < 100 , this == $customer.account, $balance: balance, $type: type)
            //$customer: Customer(name == "John", account == $account)
        then
            display("Balance is lower than 100. Current account with balance: " + $balance + " and type: " + $type);

            modify($account) { //update fact in session
                setBalance(4 * $balance)
            }
            modify($customer){
                setAccount($account)
            }
            accountService.save($account);

           /* Person p = new Person();
            p.setName("John");
            p.setStudent(true);
            display("New person created. Person:" + p);*/

end

rule "Balance grather than 100"

    when
        $account: Account(balance > 100)
    then
        display("Balance is grather than 100. Current account with balance: " + $account.getBalance());
end

//null-safe Customer( address!.postalCode == "111" )
//  • insert: This is used for inserting new facts into the session.
//  • retract: This is used for removing existing facts from the session.
